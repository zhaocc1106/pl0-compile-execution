#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include"pl0.h"
#include"string.h"
#define stacksize 500			//解释执行使用的数据栈
int main()
{
	bool nxtlev[symnum];
	char string[20]={0},fname[20]={0};
	printf("输入PL/0语言代码的文件名:\n");

	scanf("%s",fname);
	fin=fopen(fname,"r");			//以只读形式打开文件
	if(fin)
	{
		printf("是否输出虚拟机代码？(Y\\N)\n");
		fflush(stdin);
		scanf("%s",string);
		listswitch=(string[0]=='y'||string[0]=='Y');
		printf("是否输出名字表？（Y\\N）\n");
		fflush(stdin);
		scanf("%s",string);
		tableswitch=(string[0]=='y'||string[0]=='Y');
		fa1=fopen("fa1.txt","w");	//以只写形式打开fa1文件
		fprintf(fa1,"输入PL/0语言的文件名:\n");
		fprintf(fa1,"%s\n",fname);
		init();						//初始化
		err=err_row=0;
		cc=cx=ll=0;
		ch=' ';
		if(-1!=getsym())
		{
			fa=fopen("fa.txt","w");
			fas=fopen("fas.txt","w");
		}
		addset(nxtlev,declbegsys,statebegsys,symnum);
		nxtlev[period]=true;		//初始化当前的后跟字符集,用于过程的错误检测
		if(block(0,0,nxtlev)==-1)		//调用编译程序
		{
			fclose(fa);
			fclose(fa1);
			fclose(fas);
			fclose(fin);
			printf("\n");
			return 0;
		}
		fclose(fa);
		fclose(fa1);
		fclose(fas);
		if(sym!=period)
		{
			error(9);					//代码最后应为句号
		}
		if(err==0)
		{
			fa2=fopen("fa2.txt","w");
			printf("*************************pl0程序开始运行*************************\n");
			interpret();				//解释执行形成的目标代码
			fclose(fa2);
			printf("*************************pl0程序运行结束*************************\n");
		}
		else
		{
			printf("程序有%d个错误!\n",err);
		}
		fclose(fin);
	}
	else
	{
		printf("打不开文件!\n");	
	}
	printf("\n");
	printf("任意键结束...");
	fflush(stdin);
	getchar();
	return 0;
}
void init()
{
	int i;
	/*设置单字符符号*/
	for(i=0;i<=255;i++)
	{
		ssym[i]=nul;
	}
	ssym['+']=plus;
	ssym['-']=minus;
	ssym['*']=times;
	ssym['/']=slash;
	ssym['(']=lparen;
	ssym[')']=rparen;
	ssym['=']=eql;
	ssym[',']=comma;
	ssym['.']=period;
	ssym['#']=neq;
	ssym[';']=semicolon;
	ssym['%']=complementation;
	ssym['!']=negation;
	ssym['^']=powsym;
	/*设置保留名字，按照字母顺序排序*/
	strcpy(word[0],"begin");
	strcpy(word[1],"call");
	strcpy(word[2],"const");
	strcpy(word[3],"do");
	strcpy(word[4],"else");
	strcpy(word[5],"end");
	strcpy(word[6],"if");
	strcpy(word[7],"odd");
	strcpy(word[8],"procedure");
	strcpy(word[9],"read");
	strcpy(word[10],"then");
	strcpy(word[11],"var");
	strcpy(word[12],"while");
	strcpy(word[13],"write");
	/*设置保留字符号*/
	wsym[0]=beginsym;
	wsym[1]=callsym;
	wsym[2]=constsym;
	wsym[3]=dosym;
	wsym[4]=elsesym;
	wsym[5]=endsym;
	wsym[6]=ifsym;
	wsym[7]=oddsym;
	wsym[8]=procsym;
	wsym[9]=readsym;
	wsym[10]=thensym;
	wsym[11]=varsym;
	wsym[12]=whilesym;
	wsym[13]=writesym;
	/*设置命令名称*/
	strcpy(mnemonic[lit],"lit");
	strcpy(mnemonic[opr],"opr");
	strcpy(mnemonic[lod],"lod");
	strcpy(mnemonic[sto],"sto");
	strcpy(mnemonic[cal],"cal");
	strcpy(mnemonic[inte],"int");
	strcpy(mnemonic[jmp],"jmp");
	strcpy(mnemonic[jpc],"jpc");
	/*设置符号集*/
	for(i=0;i<=symnum;i++)
	{
		declbegsys[i]=false;
		statebegsys[i]=false;
		facbegsys[i]=false;
	}
	/*设置声明开始符号集*/
	declbegsys[constsym]=true;
	declbegsys[varsym]=true;
	declbegsys[procsym]=true;
	/*设置语句开始符号集*/
	statebegsys[beginsym]=true;
	statebegsys[callsym]=true;
	statebegsys[ifsym]=true;
	statebegsys[whilesym]=true;
	/*设置因子开始符号集*/
	facbegsys[ident]=true;
	facbegsys[number]=true;
	facbegsys[lparen]=true;
}
/*数组实现集合的运算*/
int inset(int e,bool* s)
{
	return s[e];
}
int addset(bool* sr,bool* s1,bool* s2,int n)
{
	int i;
	for(i=0;i<n;i++)
	{
		sr[i]=s1[i]||s2[i];
	}
	return 0;
}
int subset(bool* sr,bool* s1,bool* s2,int n)
{
	int i;
	for(i=0;i<n;i++)
	{
		sr[i]=s1[i]&&(!s2[i]);
	}
	return 0;
}
int mulset(bool* sr,bool* s1,bool* s2,int n)
{
	int i;
	for(i=0;i<n;i++)
	{
		sr[i]=s1[i]&&s2[i];
	}
	return 0;
}
void error(int n)
{
	printf("%s出错的位置为%d行\n",error_string[n-1],err_row );
	err++;
}
/*读取字符*/
/*每次读一行,存入line缓冲区中*/
int getch()
{
	if(cc==ll)					//更新缓冲区
	{
		err_row++;				//出错行加一
		if(feof(fin))
		{
			printf("程序已经读完!\n");
			return -1;
		}
		ll=0;
		cc=0;
		ch=' ';
		while(ch!=10)			//没碰到换行字符
		{
			if(EOF==fscanf(fin,"%c",&ch))		//碰到文件结束符
			{
				line[ll]=0;
				break;
			}		
			if(ch=='\\')							//\作为注释的开始符，碰到后跳到下一行
			{
				if(EOF==fscanf(fin,"%c",&ch))		//碰到文件结束符
				{
					line[ll]=0;
					break;
				}
				while(ch!='\n')
				{
					if(EOF==fscanf(fin,"%c",&ch))		//碰到文件结束符
					{
						line[ll]=0;
						ch='\n';
						break;
					}
				}
			}
			printf("%c",ch);
			fprintf(fa1,"%c",ch);
			line[ll]=ch;
			ll++;
		}
		printf("\n");
		fprintf(fa1,"\n");
	}
	ch=line[cc];
	cc++;
	return 0;
}
/*获取一个单词*/
int getsym()
{
	int i,j,k;
	while(ch==' '||ch==10||ch==9)				//忽略空格，换行，TAB
	{
		getchdo();
	}
	if((ch>='a'&&ch<='z')||ch=='_')						//当前组成的单词是保留字或自定义标识符
	{
		k=0;
		do
		{
			if(k<al)
			{
				a[k]=ch;
				k++;
			}
			else
			{
				error(33);								//标识符长度过长
			}
			getchdo();
		}while(ch>='a'&&ch<='z'||ch>='0'&&ch<='9'||ch=='_');
		a[k]=0;			//组成字符串最后添上\0
		strcpy(id,a);
		i=0;
		j=norw-1;
		do										//折半查找检测当前单词是否为保留字
		{
			k=(i+j)/2;
			if(strcmp(id,word[k])<=0)
			{
				j=k-1;
			}
			if(strcmp(id,word[k])>=0)
			{
				i=k+1;
			}
		}while(i<=j);
		if(i-1>j)
		{
			sym=wsym[k];
		}
		else
		{
			sym=ident;							//不是保留字，即为自定义标识符
		}
	}
	else
	{
		if(ch>='0'&&ch<='9')					//开始造数,单词为数字
		{
			k=0;								//记录数字位数
			num=0;
			sym=number;
			do
			{
				num=10*num+ch-'0';
				k++;
				getchdo();
			}while(ch>='0'&&ch<='9');
			if(ch=='.')							//代表数字是浮点数
			{
				getchdo();
				if(ch>='0'&&ch<='9')
				{
					i=10;
					while((ch>='0'&&ch<='9')||ch=='.')
					{
						if(ch=='.')
						{
							error(36);
							while((ch>='0'&&ch<='9')||ch=='.')		//跳过之后的数字和小数点
							{
								getchdo();
							}
							break;
						}
						num+=((float)(ch-'0'))/i;
						i*=10;
						k++;
						getchdo();
					}
				}
				else
				{
					error(35);					//小数点后面应为数字
				}
			}
			k--;
			if(k>nmax)
			{
				error(30);
			}
		}
		else
		{
			if(ch==':')							//检测是否为赋值号
			{
				getchdo();
				if(ch=='=')
				{
					sym=become;
					getchdo();
				}
				else
				{
					sym=nul;					//不能识别的符号
				}
			}
			else
			{
				if(ch=='<')							//检测是否为<=号
				{
					getchdo();
					if(ch=='=')
					{
						sym=leq;
						getchdo();
					}
					else
					{
						sym=lss;					//单词为<
					}
				}
				else
				{
					if(ch=='>')							//检测是否为>=号
					{
						getchdo();
						if(ch=='=')
						{
							sym=geq;
							getchdo();
						}
						else
						{
							sym=gtr;					//单词为>
						}
					}
					else
					{
						if(ch=='+')
						{
							getchdo();
							if(ch=='+')
							{
								sym=self_plus;
								getchdo();
							}
							else
							{
								if(ch=='=')
								{
									sym=plus_eql;
									getchdo();
								}
								else
								{
									sym=plus;
								}
							}
						}
						else
						{
							if(ch=='-')
							{
								getchdo();
								if(ch=='-')
								{
									sym=self_minus;
									getchdo();
								}
								else
								{
									if(ch=='=')
									{
										sym=minus_eql;
										getchdo();
									}
									else
									{
										sym=minus;
									}
								}
							}
							else
							{
								if(ch=='*')
								{
									getchdo();
									if(ch=='=')
									{
										sym=times_eql;
										getchdo();
									}
									else
									{
										sym=times;
									}
								}
								else
								{
									if(ch=='/')
									{
										getchdo();
										if(ch=='=')
										{
											sym=slash_eql;
											getchdo();
										}
										else
										{
											sym=slash;
										}
									}
									else
									{
										sym=ssym[ch];					//单词为单符号类型
										if(sym!=period)
											getchdo();
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return 0;
}
/*生成虚拟机代码*/
int gen(enum fct x,int y,float z,char* name)
{
	if(cx>=cxmax)
	{
		printf("程序过长");
		return -1;
	}
	code[cx].a=z;
	code[cx].f=x;
	code[cx].l=y;
	strcpy(code[cx].name,name);
	cx++;
	return 0;
}
/*检测当前单词是否合法*/
int test(bool* s1,bool* s2,int n)					//s1代表当前需要的符号，s2代表补救集合，n代表错误编号
{
	if(!inset(sym,s1))
	{
		error(n);
		while((!inset(sym,s1))&&(!inset(sym,s2)))	//跳过错误的模块
			getsymdo();
	}
	return 0;
}
/*编译程序的主体*/
int block(int lev,int tx,bool* fsys)				//lev代表当前过程的层，tx代表当前名字表的录入地址，fsys代表当前模块的后跟符号集
{
	int i;										
	int dx;											//名字分配到的相对地址
	int tx0;										//用于保留初始的tx，用于修改初始的jmp代码
	int cx0;										//用于保留初始cx,用于输出代码
	bool nxtlev[symnum];							//设置下一级的后跟符号集
	dx=3;											//过程存储空间前三个存储以后解释执行所需要的变量
	tx0=tx;
	table[tx].adr=cx;								//记录当前目标代码地址，用于之后的目标代码修改
	gendo(jmp,0,0,"\0");									//初始当前的跳转代码，在之后进行修改
	if(lev>levmax)
	{
		error(32);
	}
	do
	{
		if(sym==constsym)							//常量声明处理
		{
			getsymdo();
			do
			{
				constdeclarationdo(&tx,lev,&dx);
				while(sym==comma)					//不止一个常量
				{
					getsymdo();
					constdeclarationdo(&tx,lev,&dx);
				}
				if(sym==semicolon)					//常量声明结束
				{
					getsymdo();

				}
				else
				{
					error(5);						//缺少分号
				}
			}while(sym==ident);
		}
		if(sym==varsym)								//变量声明处理
		{
			getsymdo();
			do
			{
				vardeclarationdo(&tx,lev,&dx);
				while(sym==comma)					//不止一个常量
				{
					getsymdo();
					vardeclarationdo(&tx,lev,&dx);
				}
				if(sym==semicolon)					//常量声明结束
				{
					getsymdo();

				}
				else
				{
					error(5);						//缺少分号
				}
			}while(sym==ident);
		}
		while(sym==procsym)							//进行过程声明处理
		{
			getsymdo();
			if(sym==ident)
			{
				enter(procedur,&tx,lev,&dx);		//名字表中记录过程名
				getsymdo();
			}
			else
			{
				error(4);							//程序声明后应为标识符
			}

			if(sym==semicolon)
			{
				getsymdo();
			}
			else
			{
				error(5);							//漏掉了分号
			}
			memcpy(nxtlev,fsys,sizeof(bool)*symnum);		//继承上一级的后跟符号集
			nxtlev[semicolon]=true;
			if(-1==block(lev+1,tx,nxtlev))			//递归处理子程序
			{
				return -1;
			}
			if(sym==semicolon)
			{
				getsymdo();
				memcpy(nxtlev,statebegsys,sizeof(bool)*symnum);
				nxtlev[ident]=true;
				nxtlev[procsym]=true;				//程序声明之后可能仍为一个程序声明
				testdo(nxtlev,fsys,6);				//过程结束符号检测
			}
			else
			{
				error(5);
			}
		}
		memcpy(nxtlev,statebegsys,sizeof(bool)*symnum);
		nxtlev[ident]=true;
		nxtlev[period]=true;
		testdo(nxtlev,declbegsys,7);				//语句开始符号检测
	}while(inset(sym,declbegsys));					//循环到声明结束
	code[table[tx0].adr].a=cx;						//修复之前错误的jmp代码
	table[tx0].adr=cx;								//反填过程入口地址
	table[tx0].size=dx;								//填写过程开辟空间的大小
	cx0=cx;
	gendo(inte,0,dx,"\0");
	if(tableswitch)									//输出名字表
	{
		printf("TABLE:\n");
		if(tx0+1>tx)
		{
			printf("没有信息!\n");
		}
		for(i=tx0+1;i<=tx;i++)
		{
			switch(table[i].kind)
			{
			case constant:
				printf("%d const %s",i,table[i].name);
				printf("val=%g\n",table[i].val);
				fprintf(fas,"%d const %s",i,table[i].name);
				fprintf(fas,"val=%g\n",table[i].val);
				break;

			case variable:
				printf("%d var %s",i,table[i].name);
				printf("lev=%d addr=%d\n",table[i].level,table[i].adr);
				fprintf(fas,"%d var %s",i,table[i].name);
				fprintf(fas,"lev=%d addr=%d\n",table[i].level,table[i].adr);
				break;
			case procedur:
				printf("%d proc %s",i,table[i].name);
				printf("lev=%d addr=%d size=%d\n",table[i].level,table[i].adr,table[i].size);
				fprintf(fas,"%d proc %s",i,table[i].name);
				fprintf(fas,"lev=%d addr=%d size=%d\n",table[i].level,table[i].adr,table[i].size);
				break;
			}
		}
	printf("\n");
	}
	memcpy(nxtlev,fsys,sizeof(bool)*symnum);
	nxtlev[semicolon]=true;
	nxtlev[semicolon]=true;
	statementdo(nxtlev,&tx,lev);				//语句处理
	gendo(opr,0,0,"\0");								//每个过程出口都有释放数据段指令
	memset(nxtlev,0,sizeof(bool)*symnum);		//分程序没有补救集合
	testdo(fsys,nxtlev,8);						//检测语句后跟符号的正确性
	listcode(cx0);								//输出代码指令
	return 0;
}
/*填写名字表*/
void enter(enum object k,int* ptx,int lev,int* pdx)		//k代表名字种类，ptx为当前名字表录入位置，lev为名字所在层次，pdx为当前变量分配的相对位置
{
	(*ptx)++;
	strcpy(table[(*ptx)].name,id);
	table[*ptx].kind=k;
	switch(k)
	{
	case constant:
		if(num>amax)
		{
			error(31);							//数越界
			num=0;
		}
		table[(*ptx)].val=num;
		break;
	case variable:
		table[(*ptx)].level=lev;
		table[(*ptx)].adr=(*pdx);
		(*pdx)++;
		break;
	case procedur:
		table[(*ptx)].level=lev;				//过程的地址和存储量在反填过程录入
		break;
	}
}
/*在名字表中查找名字，返回位置*/
int position(char* idt,int tx)					//idt为要找的名字，tx为名字表当前表尾指针
{
	int i=0;
	strcpy(table[0].name,idt);
	i=tx;
	while(strcmp(table[i].name,idt)!=0)			//从表尾开始查找
	{
		i--;
	}
	return i;
}
/*常量声明处理*/
int constdeclaration(int* ptx,int lev,int* pdx)
{
	if(sym==ident)
	{
		getsymdo();
		if(sym==eql||sym==become)
		{
			if(sym==become)
			{
				error(1);						//常量初始化应用=
			}
			getsymdo();
			if(sym==number)
			{
				enter(constant,ptx,lev,pdx);
				getsymdo();
			}
			else
			{
				error(2);						//=号应为常数
			}
		}
		else
		{
			error(3);							//常量标识符后应为=
		}
	}
	else
	{
		error(4);								//常量声明符后应为标识符
	}
	return 0;
}
/*变量声明处理*/
int vardeclaration(int* ptx,int lev,int* pdx)
{
	if(sym==ident)
	{
		enter(variable,ptx,lev,pdx);
		getsymdo();
	}
	else
	{
		error(4);
	}
	return 0;
}
/*输出目标代码清单*/
void listcode(int cx0)
{
	int i;
	if(listswitch)
	{
		for(i=cx0;i<cx;i++)
		{
			printf("%d %s %d %g\n",i,mnemonic[code[i].f],code[i].l,code[i].a);
			fprintf(fa,"%d %s %d %g\n",i,mnemonic[code[i].f],code[i].l,code[i].a);
		}
	}
}
/*语句处理*/
int statement(bool* fsys,int* ptx,int lev)
{
	int i,cx1,cx2;
	bool nxtlev[symnum];
	strcpy(experssion_string,"\0");		//把表达式字符串清零
	if(sym==endsym)
	{
		error(30);						//begin与end之间无语句
		return 0;
	}
	if(sym==ident)						//赋值语句处理
	{
		i=position(id,*ptx);
		if(i==0)
		{
			error(11);					//没有该变量
		}
		else
		{
			if(table[i].kind!=variable)
			{
				error(12);				//赋值语句左边不为变量
				i=0;
			}
			else
			{
				getsymdo();
				if(sym==become)
				{
					getsymdo();
					memcpy(nxtlev,fsys,sizeof(bool)*symnum);
					expressiondo(nxtlev,ptx,lev);			//表达式处理
					if(i!=0)
					{
						gendo(sto,lev-table[i].level,table[i].adr,"\0");
					}
				}
				else
				{
					if(sym==plus_eql)
					{
						gendo(lod,lev-table[i].level,table[i].adr,"\0");
						getsymdo();
						memcpy(nxtlev,fsys,sizeof(bool)*symnum);
						expressiondo(nxtlev,ptx,lev);			//表达式处理
						if(i!=0)
						{
							gendo(opr,0,2,"\0");
							gendo(sto,lev-table[i].level,table[i].adr,"\0");
						}
					}
					else
					{
						if(sym==minus_eql)
						{
							gendo(lod,lev-table[i].level,table[i].adr,"\0");
							getsymdo();
							memcpy(nxtlev,fsys,sizeof(bool)*symnum);
							expressiondo(nxtlev,ptx,lev);			//表达式处理
							if(i!=0)
							{
								gendo(opr,0,3,"\0");
								gendo(sto,lev-table[i].level,table[i].adr,"\0");
							}
						}
						else
						{
							if(sym==times_eql)
							{
								gendo(lod,lev-table[i].level,table[i].adr,"\0");
								getsymdo();
								memcpy(nxtlev,fsys,sizeof(bool)*symnum);
								expressiondo(nxtlev,ptx,lev);			//表达式处理
								if(i!=0)
								{
									gendo(opr,0,4,"\0");
									gendo(sto,lev-table[i].level,table[i].adr,"\0");
								}
							}
							else
							{
								if(sym==slash_eql)
								{
									gendo(lod,lev-table[i].level,table[i].adr,"\0");
									getsymdo();
									memcpy(nxtlev,fsys,sizeof(bool)*symnum);
									expressiondo(nxtlev,ptx,lev);			//表达式处理
									if(i!=0)
									{
										gendo(opr,0,5,"\0");
										gendo(sto,lev-table[i].level,table[i].adr,"\0");
									}
								}
								else
								{
									if(sym==self_plus)
									{
										gendo(lod,lev-table[i].level,table[i].adr,"\0");
										getsymdo();
										if(i!=0)
										{
											gendo(lit,0,1,"\0");
											gendo(opr,0,2,"\0");
											gendo(sto,lev-table[i].level,table[i].adr,"\0");
										}
									}
									else
									{

										if(sym==self_minus)
										{
											gendo(lod,lev-table[i].level,table[i].adr,"\0");
											getsymdo();
											if(i!=0)
											{
												gendo(lit,0,1,"\0");
												gendo(opr,0,3,"\0");
												gendo(sto,lev-table[i].level,table[i].adr,"\0");
											}
										}
										else 
										{
											error(13);			//没有赋值符号
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	else
	{
		if(sym==readsym)							//输入语句处理
		{
			getsymdo();
			if(sym!=lparen)
			{
				error(34);							//缺少左括号
			}
			else
			{
				do
				{
					getsymdo();
					if(sym==ident)
					{
						i=position(id,*ptx);	
					}
					else
					{
						i=0;
					}
					if(i==0)
					{
						error(35);					//变量未声明
					}
					else
					{
						gendo(opr,0,16,table[i].name);			//生成输入指令，读入数据到栈顶
						gendo(sto,lev-table[i].level,table[i].adr,"\0");
					}
					getsymdo();
				}while(sym==comma);					//一条read语句可读入多个变量的值
			}
			if(sym!=rparen)
			{
				error(33);
				while(!inset(sym,fsys))				//出错补救
				{
					getsymdo();
				}
			}
			else
			{
				getsymdo();
			}
		}
		else
		{
			if(sym==writesym)						//输出语句处理
			{
				getsymdo();
				if(sym==lparen)
				{
					do
					{
						getsymdo();
						memcpy(nxtlev,fsys,sizeof(bool)*symnum);
						nxtlev[rparen]=true;
						nxtlev[comma]=true;
						expressiondo(nxtlev,ptx,lev);					//表达式处理,输出语句中可以是表达式
						gendo(opr,0,14,experssion_string);				//生成输出指令，输出栈顶的值
					}while(sym==comma);
					if(sym!=rparen)
					{
						error(33);										//缺少右括号
					}
					else
					{
						getsymdo();
					}
				}
				gendo(opr,0,15,"\0");										//输出换行符
			}
			else
			{
				if(sym==callsym)										//调用语句处理
				{
					getsymdo();
					if(sym!=ident)
					{
						error(14);										//call后面应为标识符
					}
					else
					{
						i=position(id,*ptx);
						if(i==0)
						{
							error(11);									//过程名未找到
						}
						else
						{
							if(table[i].kind==procedur)
							{
								gendo(cal,lev-table[i].level,table[i].adr,"\0");			//生成call指令
							}
							else
							{
								error(15);								//call后面应为过程类型变量
							}
						}
						getsymdo();
					}
				}
				else
				{
					if(sym==ifsym)
					{
						getsymdo();
						memcpy(nxtlev,fsys,sizeof(bool)*symnum);
						nxtlev[thensym]=true;
						nxtlev[dosym]=true;								//后跟符号为then或do(多余)
						conditiondo(nxtlev,ptx,lev);					//条件语句处理

						if(sym==thensym)
						{
							getsymdo();
						}
						else
						{
							error(16);										//缺少then
						}
						cx1=cx;												//保存当前指令地址
						gendo(jpc,0,0,"\0");								//生成条件跳转指令，在之后语句处理完后回填a即跳转到地址的值
						statementdo(fsys,ptx,lev);							//处理then之后的语句
						if(sym==elsesym)									//if-else形式处理
						{
							getsymdo();
							gendo(jmp,0,0,"\0");							//直接跳转指令
							code[cx1].a=cx;									//回填之前的跳转位置
							cx1=cx-1;
							statementdo(fsys,ptx,lev);						//处理else之后的语句
							code[cx1].a=cx;									//回填之前的jmp跳转位置
						}
						else												//if形式处理
						{
							code[cx1].a=cx;									//回填之前的跳转位置
						}
					}
					else
					{
						if(sym==beginsym)									//对复合语句进行处理
						{
							getsymdo();
							memcpy(nxtlev,fsys,sizeof(bool)*symnum);
							nxtlev[semicolon]=true;
							nxtlev[endsym]=true;
							statementdo(nxtlev,ptx,lev);
							while(inset(sym,statebegsys)||sym==semicolon)			//复合语句用；分割
							{
								if(sym==semicolon)
								{
									getsymdo();
									if(sym==elsesym)
									{
										error(37);							//end与else之间不应该有;
										getsymdo();
									}
									if(sym==endsym)
									{
										printf("%d行末尾不应该带分号！\n",err_row-1);								//复合语句最后的语句不应带分号
										err++;
										break;
									}
								}
								else
								{
									error(10);									//缺分号
								}
								statementdo(nxtlev,ptx,lev);					//复合语句不止一个语句
							}
							if(sym==endsym)
							{
								getsymdo();
							}
							else
							{
								error(17);										//复合语句最后用end结尾
							}
						}
						else
						{
							if(sym==whilesym)									//循环语句处理
							{
								cx1=cx;											//保留判断条件操作位置
								getsymdo();
								memcpy(nxtlev,fsys,sizeof(bool)*symnum);
								nxtlev[dosym]=true;
								conditiondo(nxtlev,ptx,lev);					//条件处理
								cx2=cx;											//用于之后条件跳转指令位置的反填
								gendo(jpc,0,0,"\0");									//条件跳转指令，跳转位置先置为零
								if(sym==dosym)
								{
									getsymdo();
								}
								else
								{
									error(18);
								}
								statementdo(fsys,ptx,lev);						//循环条件处理
								gendo(jmp,0,cx1,"\0");								//跳转到重新判断条件处
								code[cx2].a=cx;									//反填跳出循环的地址
							}
							else
							{
								memcpy(nxtlev,0,sizeof(bool)*symnum);
								testdo(fsys,nxtlev,19);							//语句结束符检测,不能补救
							}
						}
					}
				}
			}
		}
	}
	return 0;
}
/*表达式处理*/
int expression(bool* fsys,int* ptx,int lev)
{
	enum symbol addop;								//用于保存正负号
	bool nxtlev[symnum];
	if(sym==plus||sym==minus)
	{
		addop=sym;									//保存开头正负号
		if(addop==minus)
		{
			if(experssion_string[0]==0)
				strcpy(experssion_string,"-");
			else
				strcat(experssion_string,"-");
		}
		getsymdo();
		memcpy(nxtlev,fsys,sizeof(bool)*symnum);
		nxtlev[plus]=true;	
		nxtlev[minus]=true;							//项的后跟字符集包括+―号
		termdo(nxtlev,ptx,lev);						//处理项
		if(addop==minus)
		{
			gendo(opr,0,1,"\0");							//如果前面是负号，则就要将项处理完放到栈顶的数据进行取反
		}
	}
	else
	{
		memcpy(nxtlev,fsys,sizeof(bool)*symnum);
		nxtlev[plus]=true;	
		nxtlev[minus]=true;							//项的后跟字符集包括+―号
		termdo(nxtlev,ptx,lev);						//处理项
	}
	while(sym==plus||sym==minus)					//项可以连续进行加减多个
	{
		addop=sym;
		if(addop==plus)
			strcat(experssion_string,"+");
		else
			strcat(experssion_string,"-");
		getsymdo();
		memcpy(nxtlev,fsys,sizeof(bool)*symnum);
		nxtlev[plus]=true;
		nxtlev[minus]=true;
		termdo(nxtlev,ptx,lev);
		if(addop==plus)
		{
			gendo(opr,0,2,"\0");							//生成加法指令
		}
		else
		{
			gendo(opr,0,3,"\0");							//生成减法指令
		}
	}
	return 0;
}
/*项处理*/
int term(bool* fsys,int* ptx,int lev)
{
	enum symbol mulop;
	bool nxtlev[symnum];
	memcpy(nxtlev,fsys,sizeof(bool)*symnum);
	nxtlev[times]=true;								//乘除以及求余符号是因子的后跟符号
	nxtlev[slash]=true;
	nxtlev[complementation]=true;
	factordo(nxtlev,ptx,lev);						//因子处理
	while(sym==times||sym==slash||sym==complementation||sym==powsym)					//因子可以连续乘除多个因子
	{
		mulop=sym;
		if(mulop==times)
			strcat(experssion_string,"*");
		else
			if(mulop==slash)
				strcat(experssion_string,"/");
			else
				if(mulop==complementation)
					strcat(experssion_string,"%");
				else
					strcat(experssion_string,"^");
		getsymdo();
		factordo(nxtlev,ptx,lev);
		if(mulop==times)
			gendo(opr,0,4,"\0");							//生成乘法指令
		if(mulop==slash)
			gendo(opr,0,5,"\0");							//生成除法指令
		if(mulop==complementation)
			gendo(opr,0,7,"\0");							//生成求余指令
		if(mulop==powsym)
			gendo(opr,0,18,"\0");							//生成幂运算指令
	}
	return 0;
}
/*因子处理*/
int factor(bool* fsys,int* ptx,int lev)
{
	int i;
	bool nxtlev[symnum];
	strcpy(num_string,"\0");							//num_string清零
	testdo(facbegsys,fsys,24);							//因子开始符号检测
	while(inset(sym,facbegsys))
	{
		if(sym==ident)
		{
			i=position(id,*ptx);						//因子是标识符则查找该名字
			strcat(experssion_string,id);
			if(i==0)
			{
				error(11);								//标识符未声明
			}
			else
			{
				switch(table[i].kind)
				{
				case constant:
					gendo(lit,0,table[i].val,"\0");			//直接将常量值放到栈顶
					break;
				case variable:
					gendo(lod,lev-table[i].level,table[i].adr,"\0");	//找到变量在数据栈的地址，然后将值读入到栈顶
					break;
				case procedur:
					error(21);
					break;
				}
			}
			getsymdo();
		}
		else
		{
			if(sym==number)
			{
				if(num>amax)
				{
					error(31);							//数据超过了最大值
					num=0;	
				}
				_gcvt(num,nmax-2,num_string);
				for(i=0;num_string[i]!='\0';i++);
				num_string[i-1]='\0';
				strcat(experssion_string,num_string);
				gendo(lit,0,num,"\0");
				getsymdo();
			}
			else
			{
				if(sym==lparen)
				{
					strcat(experssion_string,"(");
					getsymdo();
					memcpy(nxtlev,fsys,sizeof(bool)*symnum);
					nxtlev[rparen]=true;				//此时表达式的后跟符号集包括了右括号
					expressiondo(nxtlev,ptx,lev);		//递归进行表达是处理
					strcat(experssion_string,")");
					if(sym==rparen)
					{
						getsymdo();
					}
					else
					{
						error(22);						//缺少右括号
					}
				}
				else
				{
					error(34);							//缺少左括号
				}
			}
			fsys[rparen]=true;
			fsys[plus]=true;
			fsys[minus]=true;
			fsys[times]=true;
			fsys[slash]=true;
			fsys[complementation]=true;
			fsys[powsym]=true;
			fsys[period]=true;
			fsys[semicolon]=true;
			fsys[thensym]=true;
			fsys[endsym]=true;
			fsys[dosym]=true;
			fsys[elsesym]=true;
			fsys[lss]=true;
			fsys[eql]=true;
			fsys[leq]=true;
			fsys[gtr]=true;
			fsys[geq]=true;
			fsys[neq]=true;
			testdo(fsys,facbegsys,23);					//对因子的后跟符号进行检测
		}
	}
	return 0;
}
/*条件处理*/
int condition(bool* fsys,int* ptx,int lev)
{
	enum symbol relop;
	bool nxtlev[symnum];
	if(sym==oddsym)										//对表达式进行奇数偶数判断
	{
		getsymdo();
		expressiondo(fsys,ptx,lev);
		gendo(opr,0,6,"\0");									//生成odd指令
	}
	else												//逻辑表达式处理
	{
		if(sym==negation)								//！逻辑非处理
		{
			getsymdo();
			if(sym!=lparen)
			{
				error(34);
			}
			else
			{
				getsymdo();
			}
			memcpy(nxtlev,fsys,sizeof(bool)*symnum);
			nxtlev[eql]=true;
			nxtlev[neq]=true;
			nxtlev[lss]=true;
			nxtlev[leq]=true;
			nxtlev[gtr]=true;
			nxtlev[geq]=true;
			expressiondo(nxtlev,ptx,lev);					//此时表达式处理中的后跟符号集包括了逻辑运算符
			if(sym!=eql&&sym!=neq&&sym!=lss&&sym!=leq&&sym!=gtr&&sym!=geq)
			{
				error(20);									//此时表达式后面应该为逻辑运算符
			}
			else
			{
				relop=sym;
				getsymdo();
				expressiondo(fsys,ptx,lev);					//对逻辑运算符后面的表达式进行处理
				switch(relop)								//根据两个表达式之间不同的逻辑运算符来决定生成不同的目标代码
				{
				case eql:
					gendo(opr,0,8,"\0");							//生成等号的逻辑运算
					break;
				case neq:
					gendo(opr,0,9,"\0");							//生成不等号的逻辑运算
					break;
				case lss:
					gendo(opr,0,10,"\0");						//生成小于号的逻辑运算
					break;
				case geq:
					gendo(opr,0,11,"\0");						//生成大于等于号的逻辑运算
					break;
				case gtr:
					gendo(opr,0,12,"\0");						//生成大于号的逻辑运算
					break;
				case leq:									//生成小于等于号的逻辑运算
					gendo(opr,0,13,"\0");
					break;
				}
				if(sym!=rparen)
				{
					error(22);
				}
				else
				{
					getsymdo();
				}
				gendo(opr,0,17,"\0");						//生成！运算代码
			}
		}
		else
		{
			memcpy(nxtlev,fsys,sizeof(bool)*symnum);
			nxtlev[eql]=true;
			nxtlev[neq]=true;
			nxtlev[lss]=true;
			nxtlev[leq]=true;
			nxtlev[gtr]=true;
			nxtlev[geq]=true;
			expressiondo(nxtlev,ptx,lev);					//此时表达式处理中的后跟符号集包括了逻辑运算符
			if(sym!=eql&&sym!=neq&&sym!=lss&&sym!=leq&&sym!=gtr&&sym!=geq)
			{
				error(20);									//此时表达式后面应该为逻辑运算符
			}
			else
			{
				relop=sym;
				getsymdo();
				expressiondo(fsys,ptx,lev);					//对逻辑运算符后面的表达式进行处理
				switch(relop)								//根据两个表达式之间不同的逻辑运算符来决定生成不同的目标代码
				{
				case eql:
					gendo(opr,0,8,"\0");							//生成等号的逻辑运算
					break;
				case neq:
					gendo(opr,0,9,"\0");							//生成不等号的逻辑运算
					break;
				case lss:
					gendo(opr,0,10,"\0");						//生成小于号的逻辑运算
					break;
				case geq:
					gendo(opr,0,11,"\0");						//生成大于等于号的逻辑运算
					break;
				case gtr:
					gendo(opr,0,12,"\0");						//生成大于号的逻辑运算
					break;
				case leq:									//生成小于等于号的逻辑运算
					gendo(opr,0,13,"\0");
					break;
				}
			}
		}
	}
	return 0;
}
/*解释程序*/
void interpret()
{
	int p,b,t;											//分别为当前指令指针，当前过程在数据栈中基地址，当前的栈顶指针
	struct instruction i;								//存放当前运行的指令
	float s[stacksize];									//用数组当做进行存储以及运算的数据栈
	t=b=p=0;											//初始化指针
	s[0]=s[1]=s[2]=0;									//最开始的过程的静态链动态连以及返回地址都为0,因为它是主过程，没有父过程
	do
	{
		i=code[p];										//读取当前的指令
		p++;
		switch(i.f)										//通过代码的类型进行分类处理
		{
		case lit:										//将常量值取到栈顶
			s[t]=i.a;
			t++;
			break;
		case opr:
			{
				switch((int)i.a)								//对于opr指令，不同的a对应的处理不同
				{
				case 0:									//结束本过程，恢复到上一层过程
					t=b;
					p=(int)s[t+2];							
					b=(int)s[t+1];
					break;
				case 1:									//栈顶取反
					s[t-1]=-s[t-1];
					break;
				case 2:
					t--;
					s[t-1]=s[t-1]+s[t];					//进行加法运算
					break;
				case 3:
					t--;
					s[t-1]=s[t-1]-s[t];					//进行减法运算
					break;
				case 4:
					t--;
					s[t-1]=s[t-1]*s[t];					//进行乘法运算
					break;
				case 5:
					t--;
					if(s[t]==0)
					{
						printf("计算过程中出现除号后为0\n");
						return ;
					}
					s[t-1]=s[t-1]/s[t];					//进行除法运算
					break;
				case 6:
					s[t-1]=(int)s[t-1]%2;
					break;								//进行求余运算，为了对条件表达式进行odd的判断
				case 7:
					t--;
					if(s[t]==0)
					{
						printf("计算过程中出现求余号后为0\n");
						return ;
					}
					s[t-1]=(int)s[t-1]%(int)s[t];					//进行求余运算
					break;
				case 8:
					t--;
					s[t-1]=(s[t-1]==s[t]);				//进行=号的逻辑运算
					break;
				case 9:
					t--;
					s[t-1]=(s[t-1]!=s[t]);				//进行!=号的逻辑运算
					break;
				case 10:
					t--;
					s[t-1]=(s[t-1]<s[t]);				//进行<号的逻辑运算
					break;
				case 11:
					t--;
					s[t-1]=(s[t-1]>=s[t]);				//进行>=号的逻辑运算
					break;
				case 12:
					t--;
					s[t-1]=(s[t-1]>s[t]);				//进行>号的逻辑运算
					break;
				case 13:
					t--;
					s[t-1]=(s[t-1]<=s[t]);				//进行<=号的逻辑运算
					break;
				case 14:								//进行输出操作
					printf("%s=%g",i.name,s[t-1]);
					fprintf(fa2,"%s=%g",i.name,s[t-1]);
					t--;
					break;
				case 15:
					printf("\n");						//输出换行操作
					fprintf(fa2,"\n");
					break;
				case 16:								//进行读数操作
					printf("%s=?\n",i.name);
					fprintf(fa2,"%s=?\n",i.name);				
					scanf("%f",&(s[t]));					//读数到栈顶
					fprintf(fa2,"%g\n",s[t]);
					t++;
					break;
				case 17:
					if(s[t-1]==0)
						s[t-1]=1;
					else
						s[t-1]=0;
					break;
				case 18:
					t--;
					s[t-1]=pow(s[t-1],s[t]);					//进行乘法运算
					break;
				}
				break;
		case lod:										//从数据栈中读取想要的变量数值到栈顶
			s[t]=s[base(i.l,s,b)+(int)i.a];
			t++;
			break;
		case sto:										//栈顶的值存到相应的变量的存储位置中
			t--;
			s[base(i.l,s,b)+(int)i.a]=s[t];
			break;
		case cal:										//调用子过程
			s[t]=base(i.l,s,b);							//将定义该过程的基地址存放到静态链中
			s[t+1]=b;									//把上一层过程基地址存放到动态连中
			s[t+2]=p;									//将当前的目标代码地址存放到当前过程的代码返回地址中
			b=t;										//将基地址存储器设为当前过程的基地址
			p=(int)i.a;									//过程跳转
			break;
		case inte:										//给当前过程分配内存
			t+=(int)i.a;
			break;
		case jmp:										//无条件跳转
			p=(int)i.a;
			break;
		case jpc:										//条件跳转
			t--;
			if(s[t]==0)									//对于if和while不满足条件就要跳转
			{
				p=(int)i.a;
			}
			break;
			}
		}
	}while(p!=0);										//代表最外层的过程也结束
}
/*通过过程基地址寻找上l层的基地址*/
int base(int l,float* s,int b)
{
	int b1;
	b1=b;
	while(l>0)
	{
		b1=(int)s[b1];
		l--;
	}
	return b1;
}